# (C) British Crown Copyright 2010 - 2013, Met Office
#
# This file is part of Iris.
#
# Iris is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Iris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Iris.  If not, see <http://www.gnu.org/licenses/>.

IF
f.lbtim.ia == 0
f.lbtim.ib == 0
f.lbtim.ic in [1, 2, 3]
len(f.lbcode) != 5 or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
THEN
CoordAndDims(DimCoord(f.time_unit('hours').date2num(f.t1), standard_name='time', units=f.time_unit('hours')))


IF
f.lbtim.ia == 0
f.lbtim.ib == 1
f.lbtim.ic in [1, 2, 3]
len(f.lbcode) != 5 or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
THEN
CoordAndDims(DimCoord(f.time_unit('hours', f.t2).date2num(f.t1), standard_name='forecast_period', units='hours'))
CoordAndDims(DimCoord(f.time_unit('hours').date2num(f.t1), standard_name='time', units=f.time_unit('hours')))
CoordAndDims(DimCoord(f.time_unit('hours').date2num(f.t2), standard_name='forecast_reference_time', units=f.time_unit('hours')))

IF
f.lbtim.ib == 2
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
THEN
CoordAndDims(DimCoord(f.lbft, standard_name='forecast_period', units='hours'))
CoordAndDims(DimCoord((f.time_unit('hours').date2num(f.t1) + f.time_unit('hours').date2num(f.t2)) / 2.0, standard_name='time', units=f.time_unit('hours'), bounds=f.time_unit('hours').date2num([f.t1, f.t2])))
CoordAndDims(DimCoord(f.time_unit('hours').date2num(f.t2) - f.lbft, standard_name='forecast_reference_time', units=f.time_unit('hours')))


IF
f.lbtim.ib == 3
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
THEN
CoordAndDims(DimCoord(f.lbft, standard_name='forecast_period', units='hours'))
#CoordAndDims(DimCoord((f.time_unit('hours').date2num(f.t1) + f.time_unit('hours').date2num(f.t2)) / 2.0, standard_name='time', units=f.time_unit('hours'), bounds=f.time_unit('hours').date2num([f.t1, f.t2])))
CoordAndDims(DimCoord(f.t1 + (f.t2 - f.t1) / 2, standard_name='time', units=f.time_unit('hours'), bounds=[f.t1, f.t2]))
#CoordAndDims(DimCoord(f.time_unit('hours').date2num(f.t2) - f.lbft, standard_name='forecast_reference_time', units=f.time_unit('hours')))
CoordAndDims(DimCoord(f.t2 - datetime.timedelta(hours=int(f.lbft)), standard_name='forecast_reference_time', units=f.time_unit('hours')))


# add season information if lbtim.ib==3
IF
f.lbtim.ib == 3
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
f.lbmon == 12 and f.lbdat == 1 and f.lbhr == 0 and f.lbmin == 0
f.lbmond == 3 and f.lbdatd == 1 and f.lbhrd == 0 and f.lbmind == 0
THEN
CoordAndDims(AuxCoord('djf', long_name='season', units='no_unit'))

IF
f.lbtim.ib == 3
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
f.lbmon == 3 and f.lbdat == 1 and f.lbhr == 0 and f.lbmin == 0
f.lbmond == 6 and f.lbdatd == 1 and f.lbhrd == 0 and f.lbmind == 0
THEN
CoordAndDims(AuxCoord('mam', long_name='season', units='no_unit'))

IF
f.lbtim.ib == 3
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
f.lbmon == 6 and f.lbdat == 1 and f.lbhr == 0 and f.lbmin == 0
f.lbmond == 9 and f.lbdatd == 1 and f.lbhrd == 0 and f.lbmind == 0
THEN
CoordAndDims(AuxCoord('jja', long_name='season', units='no_unit'))

IF
f.lbtim.ib == 3
f.lbtim.ic in [1, 2]
(len(f.lbcode) != 5) or (len(f.lbcode) == 5 and f.lbcode.ix not in [20, 21, 22, 23] and f.lbcode.iy not in [20, 21, 22, 23])
f.lbmon == 9 and f.lbdat == 1 and f.lbhr == 0 and f.lbmin == 0
f.lbmond == 12 and f.lbdatd == 1 and f.lbhrd == 0 and f.lbmind == 0
THEN
CoordAndDims(AuxCoord('son', long_name='season', units='no_unit'))

# Regular longitude points
IF
f.bdx != 0.0
len(f.lbcode) != 5
f.lbcode[0] == 1
THEN
CoordAndDims(DimCoord(f.regular_points("x"), standard_name=f._x_coord_name(), units='degrees', circular=(f.lbhem in [0, 4]), coord_system=f.coord_system()), 1)

# Regular longitude bounds
IF
f.bdx != 0.0
len(f.lbcode) != 5
f.lbcode[0] == 2
THEN
CoordAndDims(DimCoord(f.regular_points("x"), standard_name=f._x_coord_name(), units='degrees', circular=(f.lbhem in [0, 4]), coord_system=f.coord_system(), bounds=f.regular_bounds("x")), 1)

# Regular latitude points
IF
f.bdy != 0.0
len(f.lbcode) != 5
f.lbcode[0] == 1
THEN
CoordAndDims(DimCoord(f.regular_points("y"), standard_name=f._y_coord_name(), units='degrees', coord_system=f.coord_system()), 0)

# Regular latitude bounds
IF
f.bdy != 0.0
len(f.lbcode) != 5
f.lbcode[0] == 2
THEN
CoordAndDims(DimCoord(f.regular_points("y"), standard_name=f._y_coord_name(), units='degrees', coord_system=f.coord_system(), bounds=f.regular_bounds("y")), 0)

# Irregular latitude
IF
f.bdy == 0.0
len(f.lbcode) != 5 or (len(f.lbcode) == 5 and f.lbcode.iy == 10)
# TODO What about lbcode in [2, 102]. How does this affect the bounds?
THEN
CoordAndDims(DimCoord(f.y, standard_name=f._y_coord_name(), units='degrees', bounds=f.y_bounds, coord_system=f.coord_system()), 0)

# Irregular longitude
IF
f.bdx == 0.0
len(f.lbcode) != 5 or (len(f.lbcode) == 5 and f.lbcode.ix == 11)
# TODO What about lbcode in [2, 102]. How does this affect the bounds?
THEN
CoordAndDims(DimCoord(f.x, standard_name=f._x_coord_name(),  units='degrees', bounds=f.x_bounds, circular=(f.lbhem in [0, 4]), coord_system=f.coord_system()), 1)


####################################################################################################
#                                                                                                  #
#                             START OF LBCODE COORDINATES                                          #
# Only a subset of the permutations are made here, with the use of chaining rules it should be     # 
# easier to maintain the full list.                                                                #
#                                                                                                  #
####################################################################################################


IF
len(f.lbcode) == 5
f.lbcode[-1] == 1
f.lbcode.iy == 4
THEN
CoordAndDims(DimCoord(f.y, standard_name='depth', units='m', bounds=f.y_bounds, attributes={'positive': 'down'}), 0)

IF
len(f.lbcode) == 5
f.lbcode.ix == 10
f.bdx != 0
THEN
CoordAndDims(DimCoord(f.regular_points("x"), standard_name=f._y_coord_name(), units='degrees', coord_system=f.coord_system()), 1)

IF
len(f.lbcode) == 5
f.lbcode.iy == 1
f.bdy == 0
THEN
# TODO: Is this 'air_pressure', 'sea_water_pressure', or ...?
CoordAndDims(DimCoord(f.y, long_name='pressure', units='hPa', bounds=f.y_bounds), 0)

IF
len(f.lbcode) == 5
f.lbcode.ix == 1
f.bdx == 0
THEN
# TODO: Is this 'air_pressure', 'sea_water_pressure', or ...?
CoordAndDims(DimCoord(f.x, long_name='pressure', units='hPa', bounds=f.x_bounds), 1)


IF
len(f.lbcode) == 5
f.lbcode[-1] == 1
f.lbcode.iy == 23
THEN
CoordAndDims(DimCoord(f.y, standard_name='time', units=iris.unit.Unit('days since 0000-01-01 00:00:00', calendar=iris.unit.CALENDAR_360_DAY), bounds=f.y_bounds), 0)


IF
len(f.lbcode) == 5
f.lbcode[-1] == 1
f.lbcode.ix == 23
THEN
CoordAndDims(DimCoord(f.x, standard_name='time', units=iris.unit.Unit('days since 0000-01-01 00:00:00', calendar=iris.unit.CALENDAR_360_DAY), bounds=f.x_bounds), 1)


IF
len(f.lbcode) == 5
f.lbcode[-1] == 1
f.lbcode.ix == 13
f.bdx != 0
THEN
CoordAndDims(DimCoord(f.regular_points("x"), long_name='site_number', units='1'), 1)


# as a special case to some cross section lbcodes (currently only site), lons are encoded in lower_x_domain and upper_x_domain
IF
len(f.lbcode) == 5
13 in [f.lbcode.ix, f.lbcode.iy]
11 not in [f.lbcode.ix, f.lbcode.iy]
hasattr(f, 'lower_x_domain')
hasattr(f, 'upper_x_domain')
all(f.lower_x_domain != -1.e+30)
all(f.upper_x_domain != -1.e+30)
THEN
CoordAndDims(AuxCoord((f.lower_x_domain + f.upper_x_domain) / 2.0, standard_name=f._x_coord_name(), units='degrees', bounds=np.array([f.lower_x_domain, f.upper_x_domain]).T, coord_system=f.coord_system()), 1 if f.lbcode.ix == 13 else 0)

# as a special case to some cross section lbcodes (currently only site), lats are encoded in lower_y_domain and upper_y_domain
IF
len(f.lbcode) == 5
13 in [f.lbcode.ix, f.lbcode.iy]
10 not in [f.lbcode.ix, f.lbcode.iy]
hasattr(f, 'lower_y_domain')
hasattr(f, 'upper_y_domain')
all(f.lower_y_domain != -1.e+30)
all(f.upper_y_domain != -1.e+30)
THEN
CoordAndDims(AuxCoord((f.lower_y_domain + f.upper_y_domain) / 2.0, standard_name=f._y_coord_name(), units='degrees', bounds=np.array([f.lower_y_domain, f.upper_y_domain]).T, coord_system=f.coord_system()), 1 if f.lbcode.ix == 13 else 0)


####################################################################################################
#                                                                                                  #
#                             END OF LBCODE COORDINATES                                            #
#                                                                                                  #
####################################################################################################

IF
f.lbproc == 128
f.lbtim.ib == 2
f.lbtim.ia == 0
THEN
CellMethod("mean", coords="time")

IF
f.lbproc == 128
f.lbtim.ib == 2
f.lbtim.ia != 0
THEN
CellMethod("mean", coords="time", intervals="%d hour" % f.lbtim.ia)

IF
f.lbproc == 128
f.lbtim.ib == 3
THEN
# TODO: Calculate the interval for this CellMethod
CellMethod("mean", coords="time")

IF
f.lbproc == 128
f.lbtim.ib not in [2, 3]
THEN
CellMethod("mean", coords="time")
#TODO: BOUND INCREMENTS
#bounds increments = f.lbtim.ia

IF
f.lbproc == 4096
f.lbtim.ib == 2
f.lbtim.ia == 0
THEN
CellMethod("minimum", coords="time")

IF
f.lbproc == 4096
f.lbtim.ib == 2
f.lbtim.ia != 0
THEN
CellMethod("minimum", coords="time", intervals="%d hour" % f.lbtim.ia)

IF
f.lbproc == 4096
f.lbtim.ib != 2
THEN
CellMethod("minimum", coords="time")

IF
f.lbproc == 8192
f.lbtim.ib == 2
f.lbtim.ia == 0
THEN
CellMethod("maximum", coords="time")

IF
f.lbproc == 8192
f.lbtim.ib == 2
f.lbtim.ia != 0
THEN
CellMethod("maximum", coords="time", intervals="%d hour" % f.lbtim.ia)

IF
f.lbproc == 8192
f.lbtim.ib != 2
THEN
CellMethod("maximum", coords="time")

# Processing type rules

IF
f.lbproc not in [0, 128, 4096, 8192]
THEN
CMCustomAttribute("ukmo__process_flags", tuple(sorted([iris.fileformats.pp.lbproc_map[flag] for flag in f.lbproc.flags])))

# Height rule 1 of 2 - non 1.5m temperature.
IF
f.lbvc == 1
not (f.lbuser[6] == 1 and f.lbuser[3] == 3236)
f.blev != -1
THEN
#heightRef = "geometric"
CoordAndDims(DimCoord(f.blev, standard_name='height', units='m', attributes={'positive': 'up'}))

# Height rule 2 of 2 - 1.5m temperature.
IF
f.lbuser[6] == 1 and f.lbuser[3] == 3236
THEN
CoordAndDims(DimCoord(1.5, standard_name='height', units='m', attributes={'positive': 'up'}))

# Depth - non cross-sections.
IF
len(f.lbcode) != 5
f.lbvc == 2
THEN
CoordAndDims(DimCoord(f.lblev, standard_name='model_level_number', attributes={'positive': 'down'}))

IF
len(f.lbcode) != 5
f.lbvc == 2
f.brsvd[0] == f.brlev
THEN
CoordAndDims(DimCoord(f.blev, standard_name='depth', units='m', attributes={'positive': 'down'}))

IF
len(f.lbcode) != 5
f.lbvc == 2
f.brsvd[0] != f.brlev
THEN
CoordAndDims(DimCoord(f.blev, standard_name='depth', units='m', bounds=[f.brsvd[0], f.brlev], attributes={'positive': 'down'}))

IF
f.lbvc == 8
len(f.lbcode) != 5 or (len(f.lbcode) == 5 and 1 not in [f.lbcode.ix, f.lbcode.iy])
THEN
# TODO: Is this 'air_pressure', 'sea_water_pressure', or ...?
CoordAndDims(DimCoord(f.blev, long_name='pressure', units='hPa'))


#hybrid pressure needs further definition
#IF
#f.lbvc = 9
#THEN
#ExplicitCoord('pressure', '1', 'z', points=f.lblev, definitive=True, coord_system=HybridPressureCS(Reference('surface_pressure')))
#ExplicitCoord('level_height', 'm', 'z', points=f.blev, bounds=[f.brlev, f.brsvd[0]], definitive=True, coord_system=HybridPressureCS(Reference('surface_pressure')))
#ExplicitCoord('sigma', '1', 'z', points=f.bhlev, bounds=[f.bhrlev, f.brsvd[1]], coord_system=HybridPressureCS(Reference('surface_pressure')))

IF
f.lbvc == 65
THEN
#need orography field to calculate 3D array height coord
###,  coord_system=HybridHeightCS(Reference('orography')))
CoordAndDims(DimCoord(f.lblev, standard_name='model_level_number', attributes={'positive': 'up'}))
CoordAndDims(DimCoord(f.blev, long_name='level_height', units='m', bounds=[f.brlev, f.brsvd[0]], attributes={'positive': 'up'}))
CoordAndDims(AuxCoord(f.bhlev, long_name='sigma', bounds=[f.bhrlev, f.brsvd[1]]))
Factory(HybridHeightFactory, [{'long_name': 'level_height'}, {'long_name': 'sigma'}, Reference('orography')])


IF
f.lbrsvd[3] != 0
THEN
CoordAndDims(DimCoord(f.lbrsvd[3], standard_name='realization'))

IF
f.lbuser[4] != 0
THEN
CoordAndDims(DimCoord(f.lbuser[4], long_name='pseudo_level', units='1'))


#stash not in MOSIG
IF
f.lbuser[6] == 1 and f.lbuser[3] == 5226
THEN
CMAttribute("standard_name", "precipitation_amount")
CMAttribute("units", "kg m-2")

IF
f.lbuser[6] == 2
f.lbuser[3] == 101
THEN
CMAttribute("standard_name", "sea_water_potential_temperature")
CMAttribute("units", "Celsius")


#todo: make this more readable - flags type solution?
IF
(f.lbsrce % 10000) == 1111
(f.lbsrce / 10000) / 100.0 > 0
THEN
CMCustomAttribute('source', 'Data from Met Office Unified Model %4.2f' % ((f.lbsrce / 10000) / 100.0))

IF
(f.lbsrce % 10000) == 1111
(f.lbsrce / 10000) / 100.0 == 0
THEN
CMCustomAttribute('source', 'Data from Met Office Unified Model')

IF
f.lbuser[6] != 0 or (f.lbuser[3] / 1000) != 0 or (f.lbuser[3] % 1000) != 0
THEN
CMCustomAttribute('STASH', f.stash)

IF
f.lbuser[6] == 1
f.lbuser[3] == 4205
THEN
CMAttribute("standard_name", "mass_fraction_of_cloud_ice_in_air")
CMAttribute("units", "1")

IF
f.lbuser[6] == 1
f.lbuser[3] == 4206
THEN
CMAttribute("standard_name", "mass_fraction_of_cloud_liquid_water_in_air")
CMAttribute("units", "1")

IF
f.lbuser[6] == 1
f.lbuser[3] == 30204
THEN
CMAttribute("standard_name", "air_temperature")
CMAttribute("units", "K")

IF
f.lbuser[6] == 4
f.lbuser[3] == 6001
THEN
CMAttribute("standard_name", "sea_surface_wave_significant_height")
CMAttribute("units", "m")


################################################################################
#                                                                              #
# Stash/field code to CF meta-data rules                                       #
#                                                                              #
################################################################################

# MOSIG stash code to CF meta-data rule.
IF
str(f.stash) in MOSIG_STASH_TO_CF
THEN
CMAttribute('standard_name', MOSIG_STASH_TO_CF[str(f.stash)].name)
CMAttribute('units', MOSIG_STASH_TO_CF[str(f.stash)].unit)
CMAttribute('long_name', None)

# UM stash code to CF meta-data rule.
IF
str(f.stash) in STASH_TO_CF
THEN
CMAttribute("standard_name", STASH_TO_CF[str(f.stash)].cfname)
CMAttribute("units", STASH_TO_CF[str(f.stash)].unit) 
CMAttribute("long_name", None)

# UM field code to CF meta-data rule.
IF
not f.stash.is_valid
f.lbfc in LBFC_TO_CF
THEN
CMAttribute("standard_name", LBFC_TO_CF[f.lbfc].cfname)
CMAttribute("units", LBFC_TO_CF[f.lbfc].unit) 
CMAttribute("long_name", None)

